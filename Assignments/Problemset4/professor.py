import random


def main():
    count = 1
    score = 0
    level = get_level()
    print("Level:", level)
    
    for _ in range(10):
        x, y = map(int, generate_integer(level))
        actual_ans = x + y
        while True:
            user_ans = int(input(f"{x} + {y} ="))
            if user_ans == actual_ans:
                score = score + 1
                count = 1
                break
            else:
                count = count + 1
                if count > 3:
                    print(f"Correct ans is {actual_ans}")
                    break
                else:
                    print("EEE")
                    continue

    print(f"Score: {score}")


def get_level():
    while True:
        try:
            input_lev = int(input("Level: "))
        except ValueError:
            continue

        if input_lev in [1, 2, 3]:
            return input_lev
        else:
            continue


def generate_integer(level):
    if level == 1:
        x = random.randint(1, 10)
        y = random.randint(1, 10)
        return x, y
    elif level == 2:
        x = random.randint(11, 20)
        y = random.randint(11, 20)
        return x, y
    else:
        x = random.randint(20, 30)
        y = random.randint(20, 30)
        return x, y


if __name__ == "__main__":
    main()

'''
First, the main() function is defined. It initializes two variables, count and score, and calls the get_level() function to prompt the user for the level of difficulty. 
Then, it enters a loop that generates 10 problems using the generate_integer() function, 
prompts the user for an answer, and checks if the user's answer is correct.

The generate_integer() function takes the user's chosen level as an argument and returns two random integers within the specified range based on the level.

The user's answer is checked against the correct answer, which is calculated using the x and y values generated by generate_integer(). 
If the user's answer is correct, the score variable is incremented by 1, and the count variable is reset to 1.

If the user's answer is incorrect, the count variable is incremented by 1. If the user has had three attempts (count > 3), 
the program outputs the correct answer and moves on to the next problem. If the user has not had three attempts, the program outputs "EEE" and continues the loop.

Finally, the program outputs the user's score and the number of attempts (count) it took to answer the last problem.

The get_level() function prompts the user for a level of difficulty and ensures that the input is an integer and within the range of 1-3. If the input is invalid, 
it continues to prompt the user until a valid input is provided.

Overall, the program is a simple yet effective quiz game that tests the user's addition skills while also allowing them to choose their preferred level of difficulty.
'''